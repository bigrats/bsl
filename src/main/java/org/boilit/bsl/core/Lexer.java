/* The following code was generated by JFlex 1.4.3 on 13-9-25 下午10:10 */

// Copyright (c) 2013, Boilit. All Rights Reserved.

package org.boilit.bsl.core;

import org.boilit.cup.Symbol;
import org.boilit.cup.Scanner;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13-9-25 下午10:10 from the specification file
 * <tt>D:/W04WorkSpace/Maven001/bsl/src/analyzer/Lexer.jflex</tt>
 */
public class Lexer implements ITokens, Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int YYSTATEMENT = 2;
  public static final int END_OF_FILE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\2\1\0\1\26\1\1\22\0\1\26\1\32\1\74"+
    "\1\0\1\37\1\66\1\63\1\75\1\72\1\73\1\30\1\22\1\60"+
    "\1\33\1\20\1\27\4\76\4\77\2\14\1\57\1\61\1\31\1\65"+
    "\1\36\1\62\1\0\1\25\1\15\1\25\1\24\1\21\1\23\5\25"+
    "\1\17\6\25\1\16\7\25\1\34\1\41\1\35\1\67\1\25\1\0"+
    "\1\12\1\52\1\43\1\44\1\10\1\11\1\56\1\45\1\42\1\25"+
    "\1\53\1\5\1\55\1\3\1\46\1\50\1\25\1\7\1\13\1\6"+
    "\1\4\1\47\1\54\1\51\2\25\1\40\1\64\1\71\1\70\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\6\1\1\2\2\3\6\4\1\5\1\6\1\7"+
    "\1\3\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\5\4\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\1\2\40\1\0\1\41\3\0\7\4"+
    "\1\42\1\0\1\43\1\44\1\45\1\0\1\46\1\47"+
    "\1\50\2\0\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\0\1\60\1\61\1\4\1\62\4\4\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\40\1\100\2\101\1\0"+
    "\7\4\5\0\1\102\1\0\1\103\1\104\1\4\1\105"+
    "\1\106\2\4\1\107\1\110\1\101\1\0\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\3\1\117\1\120\3\4"+
    "\1\121\1\4\1\122\1\123\1\4\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0100\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380"+
    "\0\u03c0\0\u0400\0\u0440\0\u0480\0\u0100\0\u04c0\0\u0100\0\u0500"+
    "\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0100\0\u0640\0\u0680\0\u0100"+
    "\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0100\0\u0100\0\u0100"+
    "\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0100\0\u0100"+
    "\0\u0100\0\u0100\0\u0100\0\u0100\0\u0980\0\u09c0\0\u0100\0\u0a00"+
    "\0\u0100\0\u01c0\0\u0200\0\u0240\0\u0a40\0\u0a80\0\u0ac0\0\u0b00"+
    "\0\u0b40\0\u0b80\0\u0bc0\0\u0100\0\u0c00\0\u0100\0\u0100\0\u0100"+
    "\0\u0c40\0\u0100\0\u0100\0\u0100\0\u0c80\0\u0cc0\0\u0100\0\u0100"+
    "\0\u0d00\0\u0100\0\u0100\0\u0100\0\u0100\0\u0d40\0\u0d80\0\u0100"+
    "\0\u0dc0\0\u0340\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0100\0\u0f00"+
    "\0\u0100\0\u0f40\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100"+
    "\0\u0100\0\u0100\0\u0100\0\u0f80\0\u0100\0\u0fc0\0\u1000\0\u1040"+
    "\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240"+
    "\0\u1280\0\u12c0\0\u0280\0\u1300\0\u0100\0\u1340\0\u1380\0\u0100"+
    "\0\u13c0\0\u0340\0\u0340\0\u1400\0\u1440\0\u0100\0\u0100\0\u0100"+
    "\0\u1480\0\u0340\0\u0340\0\u0340\0\u0340\0\u0340\0\u0340\0\u0cc0"+
    "\0\u0100\0\u0100\0\u14c0\0\u1500\0\u1540\0\u0100\0\u1580\0\u0340"+
    "\0\u0340\0\u15c0\0\u0340";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\26\5\1\10\5\5\1\11\1\5"+
    "\1\12\36\5\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\17\1\22\1\23\2\17\1\24\3\17\1\25"+
    "\1\17\1\26\3\17\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\17\1\40\1\13\1\41"+
    "\4\17\1\42\1\43\1\17\1\44\2\17\1\45\1\17"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\2\24"+
    "\41\65\1\66\32\65\2\67\2\65\100\13\102\0\1\5"+
    "\76\0\1\5\130\0\1\70\105\0\1\71\70\0\1\72"+
    "\5\0\1\73\1\0\1\74\40\0\1\27\76\0\1\27"+
    "\101\0\1\17\1\75\3\17\1\76\7\17\1\0\1\17"+
    "\1\0\3\17\11\0\1\17\2\0\15\17\17\0\2\17"+
    "\3\0\15\17\1\0\1\17\1\0\3\17\11\0\1\17"+
    "\2\0\15\17\17\0\2\17\3\0\15\17\1\0\1\17"+
    "\1\0\3\17\11\0\1\17\2\0\4\17\1\77\10\17"+
    "\17\0\2\17\3\0\4\17\1\100\10\17\1\0\1\17"+
    "\1\0\3\17\11\0\1\17\2\0\15\17\17\0\2\17"+
    "\3\0\2\17\1\101\12\17\1\0\1\17\1\0\3\17"+
    "\11\0\1\17\2\0\1\17\1\102\13\17\17\0\2\17"+
    "\3\0\7\17\1\103\5\17\1\0\1\17\1\0\3\17"+
    "\11\0\1\17\2\0\15\17\17\0\2\17\5\0\1\104"+
    "\2\0\1\105\1\106\1\0\1\107\1\24\1\110\1\107"+
    "\1\104\1\111\1\105\1\0\1\106\1\112\17\0\1\112"+
    "\5\0\1\110\23\0\2\24\22\0\1\113\42\0\1\114"+
    "\41\0\1\115\1\116\34\0\1\117\77\0\1\120\43\0"+
    "\1\121\33\0\1\122\77\0\1\123\45\0\1\124\31\0"+
    "\1\125\45\0\1\126\102\0\1\127\26\0\1\130\15\0"+
    "\1\131\5\17\1\132\6\17\1\0\1\17\1\0\3\17"+
    "\11\0\1\17\2\0\15\17\17\0\2\17\3\0\7\17"+
    "\1\133\5\17\1\0\1\17\1\0\3\17\11\0\1\17"+
    "\2\0\15\17\17\0\2\17\3\0\15\17\1\0\1\17"+
    "\1\0\3\17\11\0\1\17\2\0\4\17\1\134\10\17"+
    "\17\0\2\17\3\0\4\17\1\135\10\17\1\0\1\17"+
    "\1\0\3\17\11\0\1\17\2\0\15\17\17\0\2\17"+
    "\3\0\5\17\1\136\7\17\1\0\1\17\1\0\3\17"+
    "\11\0\1\17\2\0\15\17\17\0\2\17\57\0\1\137"+
    "\103\0\1\140\1\0\1\141\76\0\1\142\1\143\77\0"+
    "\1\144\77\0\1\145\77\0\1\146\12\0\41\65\1\0"+
    "\32\65\2\0\2\65\2\147\1\0\1\150\2\147\1\151"+
    "\1\152\1\147\1\153\27\147\1\154\10\147\1\155\21\147"+
    "\2\67\1\156\1\157\33\0\1\160\47\0\2\17\1\161"+
    "\12\17\1\0\1\17\1\0\3\17\11\0\1\17\2\0"+
    "\15\17\17\0\2\17\3\0\15\17\1\0\1\17\1\0"+
    "\3\17\11\0\1\17\2\0\7\17\1\162\5\17\17\0"+
    "\2\17\3\0\15\17\1\0\1\17\1\0\3\17\11\0"+
    "\1\17\2\0\4\17\1\163\10\17\17\0\2\17\3\0"+
    "\1\17\1\164\13\17\1\0\1\17\1\0\3\17\11\0"+
    "\1\17\2\0\15\17\17\0\2\17\3\0\10\17\1\165"+
    "\4\17\1\0\1\17\1\0\3\17\11\0\1\17\2\0"+
    "\15\17\17\0\2\17\3\0\15\17\1\0\1\17\1\0"+
    "\3\17\11\0\1\17\2\0\3\17\1\166\11\17\17\0"+
    "\2\17\3\0\2\17\1\167\12\17\1\0\1\17\1\0"+
    "\3\17\11\0\1\17\2\0\15\17\17\0\2\17\14\0"+
    "\1\170\5\0\1\171\10\0\1\171\42\0\2\170\14\0"+
    "\1\172\61\0\2\172\1\115\1\173\1\27\75\115\2\116"+
    "\1\0\25\116\1\174\47\116\65\0\1\175\45\0\1\176"+
    "\102\0\1\177\26\0\1\200\15\0\15\17\1\0\1\17"+
    "\1\0\3\17\11\0\1\17\2\0\1\17\1\201\13\17"+
    "\17\0\2\17\3\0\4\17\1\202\10\17\1\0\1\17"+
    "\1\0\3\17\11\0\1\17\2\0\15\17\17\0\2\17"+
    "\3\0\15\17\1\0\1\17\1\0\3\17\11\0\1\17"+
    "\2\0\12\17\1\203\2\17\17\0\2\17\3\0\5\17"+
    "\1\204\7\17\1\0\1\17\1\0\3\17\11\0\1\17"+
    "\2\0\15\17\17\0\2\17\3\0\4\17\1\205\10\17"+
    "\1\0\1\17\1\0\3\17\11\0\1\17\2\0\15\17"+
    "\17\0\2\17\65\0\1\206\77\0\1\207\53\0\1\154"+
    "\32\0\2\67\100\0\2\157\76\0\2\210\33\0\1\211"+
    "\47\0\2\17\1\212\12\17\1\0\1\17\1\0\3\17"+
    "\11\0\1\17\2\0\15\17\17\0\2\17\3\0\3\17"+
    "\1\213\11\17\1\0\1\17\1\0\3\17\11\0\1\17"+
    "\2\0\15\17\17\0\2\17\3\0\15\17\1\0\1\17"+
    "\1\0\3\17\11\0\1\17\2\0\6\17\1\214\6\17"+
    "\17\0\2\17\3\0\5\17\1\215\7\17\1\0\1\17"+
    "\1\0\3\17\11\0\1\17\2\0\15\17\17\0\2\17"+
    "\3\0\5\17\1\216\7\17\1\0\1\17\1\0\3\17"+
    "\11\0\1\17\2\0\15\17\17\0\2\17\3\0\15\17"+
    "\1\0\1\17\1\0\3\17\11\0\1\17\2\0\4\17"+
    "\1\217\10\17\17\0\2\17\3\0\10\17\1\164\4\17"+
    "\1\0\1\17\1\0\3\17\11\0\1\17\2\0\15\17"+
    "\17\0\2\17\11\0\1\106\2\0\1\170\6\0\1\106"+
    "\1\112\17\0\1\112\31\0\2\170\14\0\1\170\61\0"+
    "\2\170\10\0\1\105\1\106\2\0\1\172\4\0\1\105"+
    "\1\0\1\106\1\112\17\0\1\112\31\0\2\172\2\116"+
    "\1\0\24\116\1\220\1\174\47\116\36\0\1\221\126\0"+
    "\1\222\15\0\2\17\1\223\12\17\1\0\1\17\1\0"+
    "\3\17\11\0\1\17\2\0\15\17\17\0\2\17\3\0"+
    "\7\17\1\224\5\17\1\0\1\17\1\0\3\17\11\0"+
    "\1\17\2\0\15\17\17\0\2\17\3\0\15\17\1\0"+
    "\1\17\1\0\3\17\11\0\1\17\2\0\14\17\1\225"+
    "\17\0\2\17\34\0\1\226\46\0\1\17\1\227\13\17"+
    "\1\0\1\17\1\0\3\17\11\0\1\17\2\0\15\17"+
    "\17\0\2\17\3\0\15\17\1\0\1\17\1\0\3\17"+
    "\11\0\1\17\2\0\11\17\1\230\3\17\17\0\2\17"+
    "\3\0\5\17\1\231\7\17\1\0\1\17\1\0\3\17"+
    "\11\0\1\17\2\0\15\17\17\0\2\17\3\0\15\17"+
    "\1\0\1\17\1\0\3\17\11\0\1\17\2\0\2\17"+
    "\1\232\12\17\17\0\2\17\3\0\5\17\1\233\7\17"+
    "\1\0\1\17\1\0\3\17\11\0\1\17\2\0\15\17"+
    "\17\0\2\17";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5632];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\5\1\1\11\11\1\1\11\1\1\1\11"+
    "\5\1\1\11\2\1\1\11\5\1\3\11\6\1\6\11"+
    "\2\1\1\11\1\0\1\11\3\0\7\1\1\11\1\0"+
    "\3\11\1\0\3\11\2\0\2\11\1\1\4\11\1\0"+
    "\1\1\1\11\6\1\1\11\1\1\1\11\1\1\11\11"+
    "\1\1\1\11\2\1\1\0\7\1\5\0\1\11\1\0"+
    "\1\1\1\11\5\1\3\11\1\0\7\1\2\11\3\1"+
    "\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public boolean holded = false;
	public char wrapper = 0;
	private int line = 0;
	private int column = 0;
	private LexerBuffer buffer = new LexerBuffer(256);
	
	public int getLine() {
		return yyline + 1;
	}
	
	public int getColumn() {
		return yycolumn + 1;
	}

    public final String yytext(int endOffset) {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead + endOffset);
    }

    public final String yytext(int startOffset, int endOffset) {
        return new String(zzBuffer, zzStartRead + startOffset, zzMarkedPos - zzStartRead + endOffset);
    }
	
	private void append() {
		buffer.append(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}
	
	private void append(char c) {
		buffer.append(c);
	}
	
	private void append(char c, int repeat) {
		if(repeat == 1) {
			buffer.append(c);
			return;
		}
		char[] chars = new char[repeat];
		for(int i=0; i < repeat; i++) { 
			chars[i] = c;
		}
		buffer.append(chars);
	}

	private void append(String string) {
		buffer.append(string);
	}

	private void delCodeLineEscape() {
		buffer.delCodeLineEscape();
	}
	
	private String pop() {
		String chars = buffer.toString();
		buffer.clear();
		return chars;
	}
	
	private void reset() {
		buffer.clear();
		line = yyline;
		column = yycolumn;
	}
	
	private Symbol symbol(int sym) {
		return new Symbol(sym, yyline + 1, yycolumn + 1, sym);
	}
	
	private Symbol symbol(int sym, Object value) {
		return new Symbol(sym, yyline + 1, yycolumn + 1, value);
	}
	
	private Symbol symbol(int sym, int line, int column, Object value) {
		return new Symbol(sym, line, column, value);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 26: 
          { return symbol(BIT_NOT);
          }
        case 85: break;
        case 69: 
          { return symbol(VAR);
          }
        case 86: break;
        case 75: 
          { return symbol(LOOP);
          }
        case 87: break;
        case 78: 
          { return symbol(ECHO);
          }
        case 88: break;
        case 51: 
          { return symbol(QUESTION_COLON);
          }
        case 89: break;
        case 67: 
          { return symbol(BIT_ZRM);
          }
        case 90: break;
        case 9: 
          { return symbol(NUM_MUL);
          }
        case 91: break;
        case 60: 
          { append('\n');
          }
        case 92: break;
        case 54: 
          { return symbol(LGC_OR);
          }
        case 93: break;
        case 56: 
          { return symbol(LGC_CEE);
          }
        case 94: break;
        case 29: 
          { return symbol(PRN_RIGHT);
          }
        case 95: break;
        case 8: 
          { return symbol(NUM_DIV);
          }
        case 96: break;
        case 7: 
          { return symbol(NUM_ADD);
          }
        case 97: break;
        case 41: 
          { return symbol(NUM_DIV_ASSIGN);
          }
        case 98: break;
        case 27: 
          { if(!holded) {return symbol(BRC_RIGHT);} else { yybegin(YYINITIAL); holded=false; return symbol(HOLD_TAIL); }
          }
        case 99: break;
        case 49: 
          { return symbol(LGC_CGE);
          }
        case 100: break;
        case 57: 
          { return symbol(NUM_MOD_ASSIGN);
          }
        case 101: break;
        case 24: 
          { return symbol(NUM_MOD);
          }
        case 102: break;
        case 62: 
          { append('\r');
          }
        case 103: break;
        case 39: 
          { return symbol(NUM_ADD1);
          }
        case 104: break;
        case 19: 
          { return symbol(SEMI);
          }
        case 105: break;
        case 25: 
          { return symbol(BIT_XOR);
          }
        case 106: break;
        case 14: 
          { return symbol(BRK_RIGHT);
          }
        case 107: break;
        case 16: 
          { return symbol(BRC_LEFT);
          }
        case 108: break;
        case 55: 
          { return symbol(BIT_OR_ASSIGN);
          }
        case 109: break;
        case 1: 
          { append();
          }
        case 110: break;
        case 61: 
          { append('\t');
          }
        case 111: break;
        case 12: 
          { return symbol(NUM_SUB);
          }
        case 112: break;
        case 34: 
          { return symbol(LONG, Long.parseLong(yytext(-1)));
          }
        case 113: break;
        case 44: 
          { return symbol(LGC_CLE);
          }
        case 114: break;
        case 73: 
          { return symbol(NULL);
          }
        case 115: break;
        case 45: 
          { return symbol(LGC_CNE);
          }
        case 116: break;
        case 37: 
          { return symbol(BYTE, Byte.parseByte(yytext(-1)));
          }
        case 117: break;
        case 74: 
          { return symbol(NEXT);
          }
        case 118: break;
        case 4: 
          { return symbol(LABEL, yytext());
          }
        case 119: break;
        case 31: 
          { wrapper='\'';
	    yybegin(STRING);
	    reset();
          }
        case 120: break;
        case 23: 
          { return symbol(ASSIGN);
          }
        case 121: break;
        case 66: 
          { return symbol(BIT_LM_ASSIGN);
          }
        case 122: break;
        case 30: 
          { wrapper='"';
	    yybegin(STRING);
	    reset();
          }
        case 123: break;
        case 2: 
          { throw new RuntimeException("Illegal character \"" + yytext() + "\" at line " + yyline + ", column " + yycolumn);
          }
        case 124: break;
        case 83: 
          { return symbol(MERGE);
          }
        case 125: break;
        case 35: 
          { return symbol(FLOAT, Float.parseFloat(yytext(-1)));
          }
        case 126: break;
        case 53: 
          { return symbol(BIT_AND_ASSIGN);
          }
        case 127: break;
        case 20: 
          { return symbol(QUESTION);
          }
        case 128: break;
        case 50: 
          { return symbol(IF);
          }
        case 129: break;
        case 5: 
          { return symbol(INTEGER, Integer.parseInt(yytext()));
          }
        case 130: break;
        case 84: 
          { return symbol(INCLUDE);
          }
        case 131: break;
        case 82: 
          { return symbol(BREAK);
          }
        case 132: break;
        case 36: 
          { return symbol(SHORT, Short.parseShort(yytext(-1)));
          }
        case 133: break;
        case 81: 
          { int n = yylength() -5;
		append('\\',n/2);
		if(n%2 == 0){
		    holded = false;
		    delCodeLineEscape();
		    yybegin(YYSTATEMENT);
		    return symbol(TEXT, line, column, pop());
		} else {
		    append("<!--[");
		}
          }
        case 134: break;
        case 72: 
          { return symbol(LGC_OR_ASSIGN);
          }
        case 135: break;
        case 59: 
          { throw new RuntimeException("Illegal escape sequence \"" + yytext() + "\"");
          }
        case 136: break;
        case 42: 
          { return symbol(NUM_MUL_ASSIGN);
          }
        case 137: break;
        case 15: 
          { return symbol(LGC_CGT);
          }
        case 138: break;
        case 22: 
          { return symbol(BIT_OR);
          }
        case 139: break;
        case 38: 
          { return symbol(DOUBLE, Double.parseDouble(yytext(-1)));
          }
        case 140: break;
        case 58: 
          { return symbol(BIT_XOR_ASSIGN);
          }
        case 141: break;
        case 79: 
          { yybegin(YYINITIAL);
          }
        case 142: break;
        case 52: 
          { return symbol(LGC_AND);
          }
        case 143: break;
        case 6: 
          { return symbol(DOT);
          }
        case 144: break;
        case 71: 
          { return symbol(LGC_AND_ASSIGN);
          }
        case 145: break;
        case 80: 
          { return symbol(BIT_ZRM_ASSIGN);
          }
        case 146: break;
        case 68: 
          { return symbol(BIT_RM_ASSIGN);
          }
        case 147: break;
        case 46: 
          { return symbol(NUM_SUB1);
          }
        case 148: break;
        case 64: 
          { append('\b');
          }
        case 149: break;
        case 43: 
          { return symbol(BIT_LM);
          }
        case 150: break;
        case 10: 
          { return symbol(LGC_CLT);
          }
        case 151: break;
        case 11: 
          { return symbol(LGC_NOT);
          }
        case 152: break;
        case 17: 
          { return symbol(COLON);
          }
        case 153: break;
        case 28: 
          { return symbol(PRN_LEFT);
          }
        case 154: break;
        case 47: 
          { return symbol(NUM_SUB_ASSIGN);
          }
        case 155: break;
        case 33: 
          { int n = yylength()-2;
		append('\\',n/2);
		if(n%2 == 0){
		    holded = true;
		    yybegin(YYSTATEMENT);
		    return symbol(TEXT, line, column, pop());
		} else {
		    append("${");
		}
          }
        case 156: break;
        case 63: 
          { append('\f');
          }
        case 157: break;
        case 3: 
          { /* ignore */
          }
        case 158: break;
        case 32: 
          { int n = yylength()-1;
        append('\\',n/2);
        char c = yycharat(n);
        if(wrapper==c && n%2 == 0){
            yybegin(YYSTATEMENT);
            return symbol(CHARS, line, column, pop());
        } else {
            append(c);
        }
          }
        case 159: break;
        case 40: 
          { return symbol(NUM_ADD_ASSIGN);
          }
        case 160: break;
        case 65: 
          { append((char) Integer.parseInt(yytext(1,0),8));
          }
        case 161: break;
        case 76: 
          { return symbol(BOOL, Boolean.parseBoolean(yytext()));
          }
        case 162: break;
        case 48: 
          { return symbol(BIT_RM);
          }
        case 163: break;
        case 21: 
          { return symbol(BIT_AND);
          }
        case 164: break;
        case 77: 
          { return symbol(ELSE);
          }
        case 165: break;
        case 18: 
          { return symbol(COMMA);
          }
        case 166: break;
        case 13: 
          { return symbol(BRK_LEFT);
          }
        case 167: break;
        case 70: 
          { return symbol(NUM_POW);
          }
        case 168: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              yybegin(END_OF_FILE);
		return symbol(TEXT, line, column, pop());
            }
            case 156: break;
            case END_OF_FILE: {
              return symbol(EOF);
            }
            case 157: break;
            default:
              {
                return symbol(EOF);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
